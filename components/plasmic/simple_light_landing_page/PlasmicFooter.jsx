// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4ZbF6xR4EPfL4FhddXLYkw
// Component: k8EMd_0Da3Wc
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import IconLink from "../../IconLink"; // plasmic-import: m5OkBM9Os7CG/component
import TextInput from "../../TextInput"; // plasmic-import: kJsDk6KG-O8f/component
import Button from "../../Button"; // plasmic-import: Kbfw0aXINDst/component
import { useScreenVariants as useScreenVariantsq7X89FoeYbPl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q7X89FOEYbPl/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4ZbF6xR4EPfL4FhddXLYkw/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: k8EMd_0Da3Wc/css
import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: psEZeLrkdgcG/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ojpECICJ9Hj2/icon
import TwitterIconIcon from "./icons/PlasmicIcon__TwitterIcon"; // plasmic-import: F_b_EO2SY2E-/icon
import GithubIconIcon from "./icons/PlasmicIcon__GithubIcon"; // plasmic-import: Bhm-C6_3S-0y/icon
import FacebookIconIcon from "./icons/PlasmicIcon__FacebookIcon"; // plasmic-import: K1kwl2VebP2S/icon

createPlasmicElementProxy;

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsq7X89FoeYbPl()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__u0Nzu)} />
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__obN0)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ayiJj)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__fY7T)}
            icon={
              <LogoIcon
                className={classNames(projectcss.all, sty.svg___25Eq4)}
                role={"img"}
              />
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__vw4Un)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__wRuka
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Terms"}
            </PlasmicLink__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x44Jy
              )}
            >
              {" \u00b7 "}
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__oir5T
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Privacy"}
            </PlasmicLink__>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__eYJrJ)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__b7CBt)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vzDV
              )}
            >
              {"Products"}
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__mgOsT
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Web Studio"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__gayKp
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"DynamicBox Flex"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__d3DwC
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Programming Forms"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__jihCf
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Integrations"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__lSrcK
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Command-line"}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__naQOh)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yoL9T
              )}
            >
              {"Resources"}
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___9D5Nl
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Documentation"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__kotFp
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Tutorials & Guides"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__s9FGr
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Blog"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__prqPb
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Support Center"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__he08E
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Partners"}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vzQf)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__klE1X
              )}
            >
              {"Company"}
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ifWzu
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Home"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ik8BQ
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"About us"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__hq4RI
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Company values"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__qyPx0
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Pricing"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zmiOv
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Privacy policy"}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___4QcO6)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__r2Eh
              )}
            >
              {"Subscribe"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hZjaM
              )}
            >
              {"Get the latest news and articles to your inbox every month."}
            </div>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              endIcon={
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"clear"}
                  size={"compact"}
                  startIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__kz9Yx)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__uyOjr)}
                    role={"img"}
                  />
                </Button>
              }
              fontSize={"small"}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"Your email"}
              showEndIcon={true}
              value={
                generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />
          </Stack__>
        </Stack__>
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__ozepP)} />
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mm0Yj)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__hQyfp)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__j8PqV
            )}
            component={Link}
            href={"https://cruip.com/"}
            platform={"nextjs"}
          >
            {"Designed by Cruip. "}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__stiai
            )}
            component={Link}
            href={"https://www.plasmic.app/"}
            platform={"nextjs"}
          >
            {"Built in Plasmic. "}
          </PlasmicLink__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0IrdO
            )}
          >
            {"All rights reserved."}
          </div>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5UZ6E)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__wfRok)}
            icon={
              <TwitterIconIcon
                className={classNames(projectcss.all, sty.svg___08Fu2)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__lHTq4)}
            icon={
              <GithubIconIcon
                className={classNames(projectcss.all, sty.svg__aWdje)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink___4ZqTi)}
            icon={
              <FacebookIconIcon
                className={classNames(projectcss.all, sty.svg__ayVVv)}
                role={"img"}
              />
            }
          />
        </Stack__>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "button"],
  textInput: ["textInput", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
